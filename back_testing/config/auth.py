import dotenv

from fastapi import FastAPI, HTTPException, status, Security, Depends 
from fastapi.security import APIKeyHeader, APIKeyQuery
from fastapi.security import OAuth2PasswordBearer

from back_testing import config

api_keys = [] # These need to be retrieved from a secure location, database, etc.

# Let's add the API key from the environment variable in .api_key
# This key can be generated by running /scripts/generate_api_key.py
api_keys.append(config.btc_app_robinhood_api_key)

# Define the API key header
api_key_header = APIKeyHeader(name="x-api-key", auto_error=False)
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")  # use token authentication

def api_key_auth(api_key_header: str = Security(api_key_header)) -> str:
    """API Key Authentication.
    
    Args:
        api_key_header (str): The API key header.
    
    Returns:
        str: The API key header.
    """
    if api_key_header is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid or missing API Key",
        )
    
    if api_key_header in api_keys:
        print(f"API Key is valid.")
        return api_key_header
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Invalid or missing API Key",
    )

def api_key_oauth(api_key: str = Depends(oauth2_scheme)):
    """API Key OAuth.

    Note: Currently unused in the application.
    
    Args:
        api_key (str): The API key.
    
    Returns:
        str: The API key.
    """
    if api_key not in api_keys:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid or missing API Key",
        )

    return api_key
